import numpy as np
def sigmoid(x):
  return 1/(1+np.exp(-x))
def sigmoid_derivative(x):
  return x*(1-x)

training_input=np.array([[0,0,1],[1,1,1],[1,0,1],[0,1,1]])
training_output=np.array([[0],[1],[1],[0]])
np.random.seed(1)
weights=np.random.random((3,1))
print("weights : \n",weights)
for i in range(10000):
  initial_layer= training_input
  outputs=sigmoid(np.dot(initial_layer,weights))
  error=training_output - outputs
  adjustment = error*sigmoid_derivative(outputs)
  weights += np.dot(initial_layer.T,adjustment)
print("output:")  
print(outputs)  
